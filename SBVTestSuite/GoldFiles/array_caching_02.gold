** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s1 () Int 0)
[GOOD] (define-fun s3 () Int 2)
[GOOD] (define-fun s4 () Int 1)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () Int) ; tracks user variable "x"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (distinct s0 s1))
[GOOD] (define-fun s5 () Int (+ s0 s4))
[GOOD] (define-fun s6 () Bool (= s1 s5))
[GOOD] (define-fun s7 () Int (ite s6 s4 s3))
[GOOD] (define-fun s8 () Int (ite s6 s3 s1))
[GOOD] (define-fun s9 () Int (ite s2 s7 s8))
[GOOD] (define-fun s10 () Bool (= s4 s9))
[GOOD] (assert s10)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (- 1)))
*** Solver   : Z3
*** Exit code: ExitSuccess

FINAL OUTPUT:
Satisfiable
